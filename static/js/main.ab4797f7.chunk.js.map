{"version":3,"sources":["components/RGBSlider.js","App.js","reportWebVitals.js","index.js"],"names":["RGBSlider","useState","red","setRed","green","setGreen","blue","setBlue","colorTarget","setColorTarget","adjust","n","length","hexRed","parseInt","toString","hexGreen","hexBlue","hexValue","useEffect","document","querySelector","setAttribute","properties","className","type","min","max","step","id","name","value","onChange","event","target","defaultChecked","htmlFor","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4MAEaA,EAAY,WAAM,MAEPC,mBAAS,GAFF,mBAEtBC,EAFsB,KAEjBC,EAFiB,OAGPF,mBAAS,GAHF,mBAG1BG,EAH0B,KAGnBC,EAHmB,OAITJ,mBAAS,GAJA,mBAI1BK,EAJ0B,KAIpBC,EAJoB,OAOSN,mBAAS,SAPlB,mBAOtBO,EAPsB,KAOTC,EAPS,KAUvBC,EAAS,SAACC,GAAD,OAAQA,EAAEC,OAAS,EAAX,WAAmBD,GAAMA,GAE9CE,EAASH,EAAOI,SAASZ,EAAK,IAAIa,SAAS,KAC3CC,EAAWN,EAAOI,SAASV,EAAO,IAAIW,SAAS,KAC/CE,EAAUP,EAAOI,SAASR,EAAM,IAAIS,SAAS,KAE7CG,EAAQ,WAAOL,GAAP,OAAgBG,GAAhB,OAA2BC,GAGrCE,qBAAU,WACQ,UAAhBX,EACIY,SACGC,cAAc,eACdC,aAAa,QAFhB,iBAEmCJ,IACnCE,SACGC,cAAc,eACdC,aAAa,QAFhB,sBAEwCJ,OAI9C,IAAMK,EAAa,CACjBC,UAAW,SACXC,KAAM,QACNC,IAAK,IACLC,IAAK,MACLC,KAAM,KAGR,OACE,sBAAKJ,UAAU,mBAAf,UACE,2BAAUA,UAAU,gBAApB,UACE,wBAAQA,UAAU,wBAAlB,oBACA,uBACEC,KAAK,QACLI,GAAG,QACHC,KAAK,cACLC,MAAM,QACNC,SAAU,SAACC,GAAD,OAAWxB,EAAewB,EAAMC,OAAOH,QACjDI,gBAAc,IAEhB,uBAAOX,UAAU,uBAAuBY,QAAQ,QAAhD,mBAIA,uBACEX,KAAK,QACLI,GAAG,aACHC,KAAK,cACLC,MAAM,aACNC,SAAU,SAACC,GAAD,OAAWxB,EAAewB,EAAMC,OAAOH,UAEnD,uBAAOP,UAAU,uBAAuBY,QAAQ,aAAhD,wBAIA,wBAAQZ,UAAU,MAAMK,GAAG,MAA3B,SACGX,OAGL,sBAAKM,UAAU,mBAAf,UACE,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,cAAf,UACE,uBAAOA,UAAU,cAAcY,QAAQ,MAAvC,eAGA,iDACMb,GADN,IAEEM,GAAG,MACHE,MAAO7B,EACP8B,SAAU,SAACC,GACT9B,EAAO8B,EAAMC,OAAOH,WAGxB,wBAAQP,UAAU,oBAAoBY,QAAQ,MAAMP,GAAG,QAAvD,SACG3B,OAIL,sBAAKsB,UAAU,cAAf,UACE,uBAAOA,UAAU,cAAcY,QAAQ,QAAvC,eAGA,iDACMb,GADN,IAEEM,GAAG,QACHE,MAAO3B,EACP4B,SAAU,SAACC,GAAD,OAAW5B,EAAS4B,EAAMC,OAAOH,WAE7C,wBACEP,UAAU,oBACVY,QAAQ,QACRP,GAAG,YAHL,SAKGzB,OAIL,sBAAKoB,UAAU,cAAf,UACE,uBAAOA,UAAU,cAAcY,QAAQ,OAAvC,eAGA,iDACMb,GADN,IAEEM,GAAG,OACHE,MAAOzB,EACP0B,SAAU,SAACC,GAAD,OAAW1B,EAAQ0B,EAAMC,OAAOH,WAE5C,wBAAQP,UAAU,oBAAoBY,QAAQ,OAAOP,GAAG,WAAxD,SACGvB,UAIP,qBAAKkB,UAAU,aAAf,8PClHOa,MARf,WACE,OACE,qBAAKb,UAAU,MAAf,SACE,cAAC,EAAD,OCOSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7B,SAAS8B,eAAe,SAM1BZ,M","file":"static/js/main.ab4797f7.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nexport const RGBSlider = () => {\r\n  // Объявим состояния для цветовых значений\r\n  const [red, setRed] = useState(0),\r\n    [green, setGreen] = useState(0),\r\n    [blue, setBlue] = useState(0);\r\n\r\n  // Объявим состояния для выбора цели изменения цвета\r\n  const [colorTarget, setColorTarget] = useState(\"color\");\r\n\r\n  // adjust() приводит конвертированные в hex числа к двум знакам, если это необходимо\r\n  const adjust = (n) => (n.length < 2 ? `0${n}` : n),\r\n    // Приводим строки из значений слайдеров к числам и преобразуем в hex, приводим hex к двум знакам\r\n    hexRed = adjust(parseInt(red, 10).toString(16)),\r\n    hexGreen = adjust(parseInt(green, 10).toString(16)),\r\n    hexBlue = adjust(parseInt(blue, 10).toString(16)),\r\n    // \"Собираем\" hex в строку, передаём её ниже для отображения hex-кода\r\n    hexValue = `#${hexRed}${hexGreen}${hexBlue}`;\r\n\r\n  // Используем useEffect(), чтобы обращаться к элементам DOM только после рендера компонента\r\n  useEffect(() => {\r\n    colorTarget === \"color\"\r\n      ? document\r\n          .querySelector(\".text-field\")\r\n          .setAttribute(\"style\", `color: ${hexValue}`)\r\n      : document\r\n          .querySelector(\".text-field\")\r\n          .setAttribute(\"style\", `background: ${hexValue}`);\r\n  });\r\n\r\n  // Немного сократим boilerplate в inpit\r\n  const properties = {\r\n    className: \"slider\",\r\n    type: \"range\",\r\n    min: \"0\",\r\n    max: \"255\",\r\n    step: \"1\",\r\n  };\r\n\r\n  return (\r\n    <div className=\"color-picker-app\">\r\n      <fieldset className=\"radio-toolbar\">\r\n        <legend className=\"radio-toolbar__legend\">Select</legend>\r\n        <input\r\n          type=\"radio\"\r\n          id=\"color\"\r\n          name=\"colorToggle\"\r\n          value=\"color\"\r\n          onChange={(event) => setColorTarget(event.target.value)}\r\n          defaultChecked\r\n        />\r\n        <label className=\"toggle-button__label\" htmlFor=\"color\">\r\n          Color\r\n        </label>\r\n\r\n        <input\r\n          type=\"radio\"\r\n          id=\"background\"\r\n          name=\"colorToggle\"\r\n          value=\"background\"\r\n          onChange={(event) => setColorTarget(event.target.value)}\r\n        />\r\n        <label className=\"toggle-button__label\" htmlFor=\"background\">\r\n          Background\r\n        </label>\r\n\r\n        <output className=\"hex\" id=\"hex\">\r\n          {hexValue}\r\n        </output>\r\n      </fieldset>\r\n      <div className=\"text-and-toggles\">\r\n        <div className=\"color-picker\">\r\n          <div className=\"input-group\">\r\n            <label className=\"label-color\" htmlFor=\"red\">\r\n              R\r\n            </label>\r\n            <input\r\n              {...properties}\r\n              id=\"red\"\r\n              value={red}\r\n              onChange={(event) => {\r\n                setRed(event.target.value);\r\n              }}\r\n            />\r\n            <output className=\"label_color-value\" htmlFor=\"red\" id=\"r_out\">\r\n              {red}\r\n            </output>\r\n          </div>\r\n\r\n          <div className=\"input-group\">\r\n            <label className=\"label-color\" htmlFor=\"green\">\r\n              G\r\n            </label>\r\n            <input\r\n              {...properties}\r\n              id=\"green\"\r\n              value={green}\r\n              onChange={(event) => setGreen(event.target.value)}\r\n            />\r\n            <output\r\n              className=\"label_color-value\"\r\n              htmlFor=\"green\"\r\n              id=\"green_out\"\r\n            >\r\n              {green}\r\n            </output>\r\n          </div>\r\n\r\n          <div className=\"input-group\">\r\n            <label className=\"label-color\" htmlFor=\"blue\">\r\n              B\r\n            </label>\r\n            <input\r\n              {...properties}\r\n              id=\"blue\"\r\n              value={blue}\r\n              onChange={(event) => setBlue(event.target.value)}\r\n            />\r\n            <output className=\"label_color-value\" htmlFor=\"blue\" id=\"blue_out\">\r\n              {blue}\r\n            </output>\r\n          </div>\r\n        </div>\r\n        <div className=\"text-field\">\r\n          \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\r\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\r\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\r\n          aliquip ex ea commodo consequat.\"\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { RGBSlider } from \"./components/RGBSlider\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RGBSlider />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}